{"code":"import { __decorate } from \"tslib\";\nimport { html, LitElement } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nexport class ZehnderCardEditor extends LitElement {\n    // setConfig works the same way as for the card itself\n    setConfig(config) {\n        this._config = config;\n    }\n    // This function is called when the input element of the editor loses focus\n    entityChanged(ev) {\n        // We make a copy of the current config so we don't accidentally overwrite anything too early\n        const config = Object.assign({}, this._config);\n        // Then we update the entity value with what we just got from the input field\n        config.entity = ev.target.value;\n        // And finally write back the updated configuration all at once\n        this._config = config;\n        // A config-changed event will tell lovelace we have made changed to the configuration\n        // this make sure the changes are saved correctly later and will update the preview\n        const event = new CustomEvent(\"config-changed\", {\n            detail: { config: config },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(event);\n    }\n    render() {\n        if (!this.hass || !this._config) {\n            return html ``;\n        }\n        // @focusout below will call entityChanged when the input field loses focus (e.g. the user tabs away or clicks outside of it)\n        return html `\n     \n\n        `;\n    }\n}\n__decorate([\n    state()\n], ZehnderCardEditor.prototype, \"_config\", void 0);\n__decorate([\n    property({ attribute: false })\n], ZehnderCardEditor.prototype, \"hass\", void 0);\ncustomElements.define(\"zehnder-card-editor\", ZehnderCardEditor);\n","references":["/Users/bolke/dev/lovelace-whr/node_modules/lit/index.d.ts","/Users/bolke/dev/lovelace-whr/node_modules/lit/decorators.d.ts","/Users/bolke/dev/lovelace-whr/node_modules/custom-card-helpers/dist/index.d.ts","/Users/bolke/dev/lovelace-whr/src/types.ts"]}
